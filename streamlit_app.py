# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wmC7uLx4iwejsVQXdONakaeNaZq-Ox-S
"""

import streamlit as st
import geopandas as gpd
import pandas as pd
import folium
from streamlit_folium import st_folium
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
from datetime import datetime

# --- SUBIR ARCHIVO PERSONALIZADO ---
archivo = st.sidebar.file_uploader("Sube tu archivo de cr√≠menes (.geojson o .csv)", type=["geojson", "csv"])

# --- CARGAR DATOS ---
@st.cache_data

def cargar_datos():
    gdf_barrios = gpd.read_file("barrios.geojson")
    return gdf_barrios

gdf_barrios = cargar_datos()

# Si se sube un archivo nuevo:
if archivo is not None:
    if archivo.name.endswith(".geojson"):
        gdf_crimenes = gpd.read_file(archivo)
    elif archivo.name.endswith(".csv"):
        df = pd.read_csv(archivo)
        geometry = gpd.points_from_xy(df.longitud, df.latitud)
        gdf_crimenes = gpd.GeoDataFrame(df, geometry=geometry, crs="EPSG:4326")
    st.success("‚úÖ Archivo cargado correctamente")
else:
    gdf_crimenes = gpd.read_file("crimenes.geojson")

# --- CONFIGURACI√ìN DE STREAMLIT ---
st.set_page_config(layout="wide")
st.title("üìç Mapa Interactivo de Cr√≠menes en Barranquilla")

# --- SIDEBAR DE FILTROS ---
st.sidebar.header("Filtros")
barrios = st.sidebar.multiselect("Barrios", options=sorted(gdf_barrios.NOMBRE.unique()), default=sorted(gdf_barrios.NOMBRE.unique()))
tipos = st.sidebar.multiselect("Tipo de Crimen", options=sorted(gdf_crimenes.tipo_crimen.unique()), default=sorted(gdf_crimenes.tipo_crimen.unique()))
sexo = st.sidebar.multiselect("Sexo de la v√≠ctima", options=["M", "F"], default=["M", "F"])

rango_fecha = st.sidebar.date_input("Rango de fechas", value=(gdf_crimenes['fecha'].min(), gdf_crimenes['fecha'].max()))
min_hora, max_hora = st.sidebar.slider("Rango horario (hora del d√≠a)", 0, 23, (0, 23))

grupos = ["habitante_calle", "prostitucion", "lgtbi", "grupo_etnico"]
filtros_sociales = {g: st.sidebar.checkbox(f"{g.replace('_', ' ').title()}", value=False) for g in grupos}

# --- FILTRADO DE DATOS ---
gdf = gdf_crimenes.copy()
gdf = gdf[(gdf['barrio'].isin(barrios)) &
          (gdf['tipo_crimen'].isin(tipos)) &
          (gdf['sexo'].isin(sexo))]

gdf['fecha_dt'] = pd.to_datetime(gdf['fecha'])
gdf = gdf[(gdf['fecha_dt'].dt.date >= rango_fecha[0]) & (gdf['fecha_dt'].dt.date <= rango_fecha[1])]

if 'hora' in gdf.columns:
    gdf['hora'] = gdf['hora'].astype(str).str[:5]
    gdf['hora_h'] = pd.to_datetime(gdf['hora'], format='%H:%M', errors='coerce').dt.hour
    gdf = gdf[(gdf['hora_h'] >= min_hora) & (gdf['hora_h'] <= max_hora)]
else:
    st.warning("‚ö†Ô∏è No se encontr√≥ la columna 'hora' en los datos. Se omitir√° el filtro horario.")

for g, activo in filtros_sociales.items():
    if activo:
        gdf = gdf[gdf[g] == 1]

# --- COLORES ---
categorias = sorted(gdf['tipo_crimen'].unique())
cmap = plt.get_cmap("tab20")
colores = [mcolors.to_hex(cmap(i)) for i in range(len(categorias))]
color_dict = {cat: col for cat, col in zip(categorias, colores)}

# --- MAPA ---
centro = [gdf.geometry.y.mean(), gdf.geometry.x.mean()]
m = folium.Map(location=centro, zoom_start=13, tiles="CartoDB dark_matter")

# A√±adir barrios
folium.GeoJson(gdf_barrios, name="Barrios",
               style_function=lambda x: {"fillOpacity": 0, "color": "white", "weight": 1}).add_to(m)

# A√±adir puntos
for _, row in gdf.iterrows():
    popup = f"""
    <b>ID:</b> {row['id']}<br>
    <b>Tipo:</b> {row['tipo_crimen']}<br>
    <b>Fecha:</b> {row['fecha']}<br>
    <b>Hora:</b> {row.get('hora', 'N/A')}<br>
    <b>Barrio:</b> {row['barrio']}<br>
    <b>Edad:</b> {row['edad']}<br>
    <b>Sexo:</b> {row['sexo']}<br>
    <b>Sociales:</b><br>
    {'‚úîÔ∏è' if row['habitante_calle'] else '‚ùå'} Habitante calle<br>
    {'‚úîÔ∏è' if row['prostitucion'] else '‚ùå'} Prostituci√≥n<br>
    {'‚úîÔ∏è' if row['lgtbi'] else '‚ùå'} LGTBI<br>
    {'‚úîÔ∏è' if row['grupo_etnico'] else '‚ùå'} Grupo √©tnico
    """
    folium.CircleMarker(
        location=[row.geometry.y, row.geometry.x],
        radius=4,
        color=color_dict[row['tipo_crimen']],
        fill=True,
        fill_color=color_dict[row['tipo_crimen']],
        fill_opacity=0.8,
        popup=popup
    ).add_to(m)

# Mostrar el mapa en Streamlit
st_data = st_folium(m, width=1200, height=600)

# Mostrar tabla opcional
cols_to_drop = ['geometry', 'fecha_dt']
if 'hora_h' in gdf.columns:
    cols_to_drop.append('hora_h')
if st.checkbox("Mostrar tabla de cr√≠menes filtrados"):
    st.dataframe(gdf.drop(columns=cols_to_drop, errors='ignore'))